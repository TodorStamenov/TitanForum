@model QuestionDetailsViewModel

@{
    ViewBag.Title = "Question Details";
    string previouseDisabled = Model.CurrentPage == 1 ? "disabled" : string.Empty;
    string nextDisabled = Model.CurrentPage == Model.TotalPages ? "disabled" : string.Empty;
}

<div class="row">
    <br />
    <div class="col-md-3">
        @Html.Action("Invoke", "Menu", new { subCategoryId = Model.Question.SubCategoryId })
    </div>
    <div class="col-md-9">
        <div class="well">
            <img class="site-image" src="@Model.Question.AuthorProfileImage" alt="Author Image" width="30" height="30" />
            @Model.Question.AuthorUsername
            @Model.Question.Rating Points
            @if (User.Identity.IsAuthenticated)
            {
                using (Html.BeginForm("Report", "Questions", FormMethod.Post, new { @class = "pull-right" }))
                {
                    @Html.HiddenFor(m => m.Question.Id)
                    <button class="glyphicon-submit" type="submit">
                        <span class="glyphicon glyphicon-alert text-danger glyphicon-button"></span>
                    </button>
                }
            }
            @if (User.IsInRole(CommonConstants.ModeratorRole))
            {
                using (Html.BeginForm("Lock", "Questions", FormMethod.Post, new { @class = "pull-right" }))
                {
                    @Html.HiddenFor(m => m.Question.Id)
                    <button class="glyphicon-submit" type="submit">
                        <span class="glyphicon glyphicon-lock text-primary glyphicon-button"></span>
                    </button>
                }
            }
            <hr />
            <h3>
                <a href="@Url.Action("Details", "Questions", new { area = string.Empty, id = Model.Question.Id })">
                    @Model.Question.Title
                </a>
            </h3>
            <p>@Model.Question.Content</p>
            <hr />
            Tags:
            @foreach (var tag in Model.Tags)
            {
                <a class="btn btn-default" href="@Url.Action("ByTag", "Questions", new { area = string.Empty, id = tag.Id })">
                    @tag.Name
                </a>
            }
            <hr />
            @if (!User.Identity.IsAuthenticated || Model.Question.HasVoted)
            {
                <span class="glyphicon glyphicon-hand-up text-success site-glyphicon"></span>
                @Model.Question.UpVotes
                <span class="glyphicon glyphicon-hand-down text-danger site-glyphicon"></span>
                @Model.Question.DownVotes
            }
            else
            {
                using (Html.BeginForm("Vote", "Questions", FormMethod.Post, new { @class = "pull-left" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.Hidden(nameof(Model.Question.Id), Model.Question.Id)
                    @Html.Hidden("page", Model.CurrentPage)
                    @Html.Hidden(nameof(Direction), Direction.Like)
                    <button class="glyphicon-vote-submit" type="submit">
                        <span class="glyphicon glyphicon-thumbs-up text-success site-glyphicon glyphicon-vote-button"></span>
                    </button>
                    @Model.Question.UpVotes
                }
                using (Html.BeginForm("Vote", "Questions", FormMethod.Post, new { @class = "pull-left" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.Hidden(nameof(Model.Question.Id), Model.Question.Id)
                    @Html.Hidden("page", Model.CurrentPage)
                    @Html.Hidden(nameof(Direction), Direction.Dislike)
                    <button class="glyphicon-vote-submit" type="submit">
                        <span class="glyphicon glyphicon-thumbs-down text-danger site-glyphicon glyphicon-vote-button"></span>
                    </button>
                    @Model.Question.DownVotes
                }
            }
            <span class="glyphicon glyphicon-calendar site-glyphicon"></span>
            @Model.Question.DateAdded
            <span class="glyphicon glyphicon-folder-open site-glyphicon"></span>
            <a href="@Url.Action("BySubCategory", "Questions", new { area = string.Empty, id = Model.Question.SubCategoryId })">
                @Model.Question.SubCategoryName
            </a>
            @if (User.Identity.IsAuthenticated)
            {
                <hr />
                <a class="btn btn-success" href="@Url.Action("Create", "Answers", new { questionId = Model.Question.Id, page = Model.CurrentPage })">
                    Answer
                </a>
                <div class="pull-right">
                    @if (Model.Question.IsOwner || User.IsInRole(CommonConstants.ModeratorRole))
                    {
                        <a class="btn btn-default" href="@Url.Action("Edit", "Questions", new { id = Model.Question.Id })">
                            Edit
                        </a>
                    }
                    @if (User.IsInRole(CommonConstants.ModeratorRole))
                    {
                        using (Html.BeginForm("Lock", "Questions", FormMethod.Post, new { @class = "pull-left" }))
                        {
                            @Html.HiddenFor(m => m.Question.Id)
                            <input class="btn btn-default" type="submit" value="Lock" />
                        }
                        <a class="btn btn-default" href="@Url.Action("Delete", "Questions", new { id = Model.Question.Id })">
                            Delete
                        </a>
                    }
                </div>
            }
        </div>

        @if (Model.Answers.Any())
        {
            <ul class="pagination">
                <li class="page-item">
                    <a class="page-link @previouseDisabled" href="@Url.Action("Details", "Questions", new { area = string.Empty, id = Model.Question.Id, page = Model.PrevPage})" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                        <span class="sr-only">Previous</span>
                    </a>
                </li>
                @for (int i = Model.FirstPage; i <= Model.LastPage; i++)
                {
                    <li class="page-item @(Model.CurrentPage == i ? "active" : string.Empty)">
                        <a class="page-link @(Model.CurrentPage == i ? "disabled" : string.Empty)" href="@Url.Action("Details", "Questions", new { area = string.Empty, id = Model.Question.Id, page = i})">@i</a>
                    </li>
                }
                <li class="page-item">
                    <a class="page-link @nextDisabled" href="@Url.Action("Details", "Questions", new { area = string.Empty, id = Model.Question.Id, page = Model.NextPage})" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                        <span class="sr-only">Next</span>
                    </a>
                </li>
            </ul>
        }

        @foreach (var answer in Model.Answers)
        {
            <div class="panel panel-default site-panel">
                <img class="site-image" src="@answer.AuthorProfileImage" alt="Author Image" width="30" height="30" />
                @answer.AuthorUsername
                @answer.Rating Points
                @if (User.Identity.IsAuthenticated)
                {
                    using (Html.BeginForm("Report", "Answers", FormMethod.Post, new { @class = "pull-right" }))
                    {
                        @Html.HiddenFor(_ => answer.Id)
                        @Html.HiddenFor(m => m.Question.Id)
                        @Html.HiddenFor(m => m.CurrentPage)
                        <button class="glyphicon-submit" type="submit">
                            <span class="glyphicon glyphicon-alert text-danger glyphicon-button"></span>
                        </button>
                    }
                }
                <hr />
                <p>@answer.Content</p>
                <hr />
                @if (!User.Identity.IsAuthenticated || answer.HasVoted)
                {
                    <span class="glyphicon glyphicon-hand-up text-success site-glyphicon"></span>
                    @answer.UpVotes
                    <span class="glyphicon glyphicon-hand-down text-danger site-glyphicon"></span>
                    @answer.DownVotes
                }
                else
                {
                    using (Html.BeginForm("Vote", "Answers", FormMethod.Post, new { @class = "pull-left" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.Hidden(nameof(Model.Question.Id), Model.Question.Id)
                        @Html.Hidden("answerId", answer.Id)
                        @Html.Hidden("page", Model.CurrentPage)
                        @Html.Hidden(nameof(Direction), Direction.Like)
                        <button class="glyphicon-vote-submit" type="submit">
                            <span class="glyphicon glyphicon-thumbs-up text-success site-glyphicon glyphicon-vote-button"></span>
                        </button>
                        @answer.UpVotes
                    }
                    using (Html.BeginForm("Vote", "Answers", FormMethod.Post, new { @class = "pull-left" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.Hidden(nameof(Model.Question.Id), Model.Question.Id)
                        @Html.Hidden("answerId", answer.Id)
                        @Html.Hidden("page", Model.CurrentPage)
                        @Html.Hidden(nameof(Direction), Direction.Dislike)
                        <button class="glyphicon-vote-submit" type="submit">
                            <span class="glyphicon glyphicon-thumbs-down text-danger site-glyphicon glyphicon-vote-button"></span>
                        </button>
                        @answer.DownVotes
                    }
                }
                <span class="glyphicon glyphicon-calendar site-glyphicon"></span>
                @answer.DateAdded
                @if (User.Identity.IsAuthenticated)
                {
                    <hr />
                    <a class="btn btn-success" href="@Url.Action("Create", "Comments", new { answerId = answer.Id, questionId = Model.Question.Id, page = Model.CurrentPage  })">
                        Comment
                    </a>
                    <div class="pull-right">
                        @if (answer.IsOwner || User.IsInRole(CommonConstants.ModeratorRole))
                        {
                            <a class="btn btn-default" href="@Url.Action("Edit", "Answers", new { id = answer.Id, questionId = Model.Question.Id, page = Model.CurrentPage })">
                                Edit
                            </a>
                        }
                        @if (User.IsInRole(CommonConstants.ModeratorRole))
                        {
                            <a class="btn btn-default" href="@Url.Action("Delete", "Answers", new { id = answer.Id, questionId = Model.Question.Id, page = Model.CurrentPage })">
                                Delete
                            </a>
                        }
                    </div>
                }
            </div>

            foreach (var comment in answer.Comments)
            {
                <div class="col-md-offset-1 panel panel-default site-panel">
                    <img class="site-image" src="@comment.AuthorProfileImage" alt="Author Image" width="30" height="30" />
                    @comment.AuthorUsername
                    @comment.Rating Points
                    @if (User.Identity.IsAuthenticated)
                    {
                        using (Html.BeginForm("Report", "Comments", FormMethod.Post, new { @class = "pull-right" }))
                        {
                            @Html.HiddenFor(_ => comment.Id)
                            @Html.HiddenFor(m => m.Question.Id)
                            @Html.HiddenFor(m => m.CurrentPage)
                            <button class="glyphicon-submit" type="submit">
                                <span class="glyphicon glyphicon-alert text-danger glyphicon-button"></span>
                            </button>
                        }
                    }
                    <hr />
                    <p>@comment.Content</p>
                    <hr />
                    @if (!User.Identity.IsAuthenticated || comment.HasVoted)
                    {
                        <span class="glyphicon glyphicon-hand-up text-success site-glyphicon"></span>
                        @comment.UpVotes
                        <span class="glyphicon glyphicon-hand-down text-danger site-glyphicon"></span>
                        @comment.DownVotes
                    }
                    else
                    {
                        using (Html.BeginForm("Vote", "Comments", FormMethod.Post, new { @class = "pull-left" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.Hidden(nameof(Model.Question.Id), Model.Question.Id)
                            @Html.Hidden("commentId", comment.Id)
                            @Html.Hidden("page", Model.CurrentPage)
                            @Html.Hidden(nameof(Direction), Direction.Like)
                            <button class="glyphicon-vote-submit" type="submit">
                                <span class="glyphicon glyphicon-thumbs-up text-success site-glyphicon glyphicon-vote-button"></span>
                            </button>
                            @comment.UpVotes
                        }
                        using (Html.BeginForm("Vote", "Comments", FormMethod.Post, new { @class = "pull-left" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.Hidden(nameof(Model.Question.Id), Model.Question.Id)
                            @Html.Hidden("commentId", comment.Id)
                            @Html.Hidden("page", Model.CurrentPage)
                            @Html.Hidden(nameof(Direction), Direction.Dislike)
                            <button class="glyphicon-vote-submit" type="submit">
                                <span class="glyphicon glyphicon-thumbs-down text-danger site-glyphicon glyphicon-vote-button"></span>
                            </button>
                            @comment.DownVotes
                        }
                    }
                    <span class="glyphicon glyphicon-calendar site-glyphicon"></span>
                    @comment.DateAdded
                    @if (User.Identity.IsAuthenticated)
                    {
                        if (comment.IsOwner || User.IsInRole(CommonConstants.ModeratorRole))
                        {
                            <hr />
                            <a class="btn btn-default" href="@Url.Action("Edit", "Comments", new { id = comment.Id, questionId = Model.Question.Id, page = Model.CurrentPage })">
                                Edit
                            </a>
                        }
                        if (User.IsInRole(CommonConstants.ModeratorRole))
                        {
                            <a class="btn btn-default" href="@Url.Action("Delete", "Comments", new { id = comment.Id, questionId = Model.Question.Id, page = Model.CurrentPage })">
                                Delete
                            </a>
                        }
                    }
                </div>
            }
        }

        @if (Model.Answers.Any())
        {
            <ul class="pagination">
                <li class="page-item">
                    <a class="page-link @previouseDisabled" href="@Url.Action("Details", "Questions", new { area = string.Empty, id = Model.Question.Id, page = Model.PrevPage})" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                        <span class="sr-only">Previous</span>
                    </a>
                </li>
                @for (int i = Model.FirstPage; i <= Model.LastPage; i++)
                {
                    <li class="page-item @(Model.CurrentPage == i ? "active" : string.Empty)">
                        <a class="page-link @(Model.CurrentPage == i ? "disabled" : string.Empty)" href="@Url.Action("Details", "Questions", new { area = string.Empty, id = Model.Question.Id, page = i})">@i</a>
                    </li>
                }
                <li class="page-item">
                    <a class="page-link @nextDisabled" href="@Url.Action("Details", "Questions", new { area = string.Empty, id = Model.Question.Id, page = Model.NextPage})" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                        <span class="sr-only">Next</span>
                    </a>
                </li>
            </ul>
        }
    </div>
</div>